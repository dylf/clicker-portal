{"version":3,"sources":["components/Menu.jsx","components/WalletAddress.jsx","App.jsx","contract/address.js","contract/execute.js","components/LoadingIndicator/index.jsx","pages/Play.jsx","contract/query.js","pages/Leaderboard.jsx","pages/Guide.jsx","index.js"],"names":["menu_options","name","link","Menu","className","map","mb","index","to","WalletAddress","connectedWallet","useConnectedWallet","terraAddress","slice","App","useWallet","status","connect","disconnect","availableConnectTypes","console","log","WalletStatus","WALLET_NOT_CONNECTED","src","alt","WALLET_CONNECTED","type","onClick","contractAddress","wallet","config","network","clicker","contractAddresses","default","sleep","ms","Promise","resolve","setTimeout","until","Date","now","untilInterval","_exec","msg","fee","Fee","uluna","a","lcd","LCDClient","URL","chainID","post","msgs","MsgExecuteContract","walletAddress","result","tx","txInfo","txhash","Error","setScore","score","upsert_score","LoadingIndicator","Play","useState","time","setTime","top","left","width","height","targetPosition","setTargetPosition","loading","setLoading","useEffect","unsubscribe","setInterval","display","alert","submitScore","execute","window","location","href","id","style","audio","Audio","volume","play","Math","floor","random","getScores","wasm","contractQuery","get_scores","Leaderboard","scores","setScores","fetchScores","query","then","length","toString","padStart","renderScores","Guide","TWITTER_HANDLE","TWITTER_LINK","getChainOptions","chainOptions","ReactDOM","render","StrictMode","path","element","target","rel","document","getElementById"],"mappings":"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","file":"static/js/main.b700743e.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst menu_options = [\n  { name: 'Play', link: '/play' },\n  { name: 'Leaderboard', link: '/leaderboard' },\n  { name: 'How to play', link: '/guide' },\n];\n\nconst Menu = () => {\n  const renderMenu = () => {\n    return menu_options.map((mb, index) => {\n      const { name, link } = mb;\n\n      return (\n        <Link to={link} key={index} className=\"menu-item\">\n          <span className=\"item-text\">{name}</span>\n        </Link>\n      );\n    });\n  };\n\n  return <div className=\"game-menu\">{renderMenu()}</div>;\n};\n\nexport default Menu;\n","import { useConnectedWallet } from '@terra-money/wallet-provider';\n\nconst WalletAddress = () => {\n  const connectedWallet = useConnectedWallet();\n  const { terraAddress } = { ...connectedWallet };\n\n  return (\n    <div>\n      {terraAddress && (\n        <button className=\"wallet-address\">\n          {terraAddress.slice(0, 5) + '...' + terraAddress.slice(-4)}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default WalletAddress;\n","import './App.css';\nimport { useWallet, WalletStatus } from '@terra-money/wallet-provider';\nimport Menu from './components/Menu';\nimport WalletAddress from './components/WalletAddress';\n\nfunction App() {\n  const { status, connect, disconnect, availableConnectTypes } = useWallet();\n  console.log('Wallet status is ', status);\n  console.log('Available connection types:', availableConnectTypes);\n\n  const renderConnectButton = () => {\n    if (status === WalletStatus.WALLET_NOT_CONNECTED) {\n      return (\n        <div className=\"connect-wallet-div\">\n          <button\n            type=\"button\"\n            key={`connect-EXTENSION`}\n            onClick={() => connect('EXTENSION')}\n            className=\"connect-wallet-button cta-button\"\n          >\n            Connect Wallet\n          </button>\n        </div>\n      );\n    } else if (status === WalletStatus.WALLET_CONNECTED) {\n      return (\n        <button\n          type=\"button\"\n          onClick={() => disconnect()}\n          className=\"cta-button connect-wallet-button\"\n        >\n          Disconnect\n        </button>\n      );\n    }\n  };\n  return (\n    <main className=\"App\">\n      <header>\n        <div className=\"header-titles\">\n          <h1>⚔ Goblin War ⚔</h1>\n          <p>Join the fight!</p>\n        </div>\n        <WalletAddress />\n      </header>\n\n      {/* If not connected, show the goblin GIF! */}\n      {status === WalletStatus.WALLET_NOT_CONNECTED && (\n        <div>\n          <img\n            src=\"https://media.giphy.com/media/B19AYwNXoXtcs/giphy.gif\"\n            alt=\"Goblin gif\"\n          />\n        </div>\n      )}\n\n      {/* Show the menu after connection */}\n      {status === WalletStatus.WALLET_CONNECTED && (\n        <div className=\"game-menu-container\">\n          <Menu />\n        </div>\n      )}\n\n      {renderConnectButton()}\n    </main>\n  );\n}\n\nexport default App;\n","import config from '../refs.terrain.json';\n\nexport const contractAddress = (wallet) =>\n  config[wallet.network.name].clicker.contractAddresses.default;\n","import { LCDClient, MsgExecuteContract, Fee } from '@terra-money/terra.js';\nimport { contractAddress } from './address';\n\n// ==== utils ====\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst until = Date.now() + 1000 * 60 * 60;\nconst untilInterval = Date.now() + 1000 * 60;\n\nconst _exec =\n  (msg, fee = new Fee(200000, { uluna: 10000 })) =>\n  async (wallet) => {\n    const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID,\n    });\n\n    const { result } = await wallet.post({\n      fee,\n      msgs: [\n        new MsgExecuteContract(\n          wallet.walletAddress,\n          contractAddress(wallet),\n          msg\n        ),\n      ],\n    });\n\n    while (true) {\n      try {\n        return await lcd.tx.txInfo(result.txhash);\n      } catch (e) {\n        if (Date.now() < untilInterval) {\n          await sleep(500);\n        } else if (Date.now() < until) {\n          await sleep(1000 * 10);\n        } else {\n          throw new Error(\n            `Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`\n          );\n        }\n      }\n    }\n  };\n\n// ==== execute contract ====\n// THIS IS ALL I ADDED!!!\nexport const setScore = async (wallet, score) =>\n  _exec({ upsert_score: { score } })(wallet);\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;","import React, { useState, useEffect } from 'react';\nimport * as execute from '../contract/execute';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport LoadingIndicator from '../components/LoadingIndicator';\n\nconst Play = () => {\n  const connectedWallet = useConnectedWallet();\n  const playTime = 300;\n\n  const [time, setTime] = useState(playTime);\n  const [gameOver, setGameOver] = useState(false);\n  // We use this to track where the target is on the screen\n  const [targetPosition, setTargetPosition] = useState({\n    top: '15%',\n    left: '50%',\n    width: 100,\n    height: 'auto',\n  });\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n\n  // Every second we're going to lower the value of time.\n  useEffect(() => {\n    const unsubscribe = setInterval(() => {\n      setTime((time) => (time > 0 ? time - 1 : 0));\n    }, 1000);\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    if (time === 0) {\n      setTargetPosition({ display: 'none' });\n      // Show alert to let user know it's game over\n      alert(\n        `Game Over! Your score is ${score}. Please confirm transaction to submit score.`\n      );\n      submitScore();\n    }\n  }, [time]);\n\n  const submitScore = async () => {\n    if (connectedWallet && connectedWallet.network.name === 'testnet') {\n      setLoading(true);\n      const tx = await execute.setScore(connectedWallet, score);\n      console.log(tx);\n      // Once the transaction is confirmed, we let the user know and navigate to the leaderboard\n      alert('Score submitted!');\n      setLoading(false);\n      window.location.href = '/leaderboard';\n    }\n  };\n\n  const handleClick = () => {\n    let audio = new Audio('/Zergling_explodes.mp3');\n\n    // Don't let it get too loud!\n    audio.volume = 0.2;\n    audio.play();\n\n    setScore((score) => score + 1);\n\n    // Play around with this to control bounds!\n    setTargetPosition({\n      top: `${Math.floor(Math.random() * 80)}%`,\n      left: `${Math.floor(Math.random() * 80)}%`,\n      width: `${Math.floor(Math.random() * 90 + 10)}px`,\n      height: 'auto',\n    });\n  };\n\n  return (\n    <div className=\"score-board-container\">\n      <div className=\"play-container\">\n        <span>Score: {score}</span>\n        <span>Fight!</span>\n        <span>Time left: {time} s</span>\n      </div>\n\n      {loading ? (\n        <LoadingIndicator />\n      ) : (\n        <div className=\"game-container\">\n          <img\n            src={'orc.png'}\n            id=\"target\"\n            alt=\"Target\"\n            style={{ ...targetPosition }}\n            onClick={handleClick}\n          />\n          <img src=\"Marine.png\" id=\"marine-img\" alt=\"Marine\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Play;\n","import { LCDClient } from '@terra-money/terra.js';\nimport { contractAddress } from './address';\n\nexport const getScores = async (wallet) => {\n  console.log('Contract address is ', contractAddress(wallet));\n  const lcd = new LCDClient({\n    URL: wallet.network.lcd,\n    chainID: wallet.network.chainID,\n  });\n  return lcd.wasm.contractQuery(contractAddress(wallet), { get_scores: {} });\n};\n","import * as query from '../contract/query';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Leaderboard = () => {\n  const connectedWallet = useConnectedWallet();\n\n  const [scores, setScores] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === 'testnet') {\n        console.log(\n          'Scores fetched',\n          (await query.getScores(connectedWallet)).scores\n        );\n      }\n    };\n    fetchScores().then((scores) => {\n      setScores(scores);\n    });\n    setLoading(false);\n  }, [connectedWallet]);\n\n  const renderScores = (scores) => {\n    if (!scores || scores.length < 1) {\n      return <div> No scores available :( </div>;\n    }\n\n    return scores.map((score, index) => {\n      return (\n        <div key={index} className=\"score\">\n          <span>\n            {score[0].slice(0, 5) + '...' + score[0].slice(-4)}:{' '}\n            {score[1].toString().padStart(2, '0')}\n          </span>\n        </div>\n      );\n    });\n  };\n\n  useEffect(() => {}, [scores]);\n\n  return (\n    <main className=\"App\">\n      <header>\n        <Link to=\"/\" className=\"home-link\">\n          <div className=\"header-titles\">\n            <h1>⚔ Goblin War ⚔️</h1>\n            <p>Only you can save us from Goblin town</p>\n          </div>\n        </Link>\n      </header>\n\n      <div className=\"score-board-container\">\n        <h3>Scoreboard</h3>\n        {/* If loading, show loading, else render */}\n        {loading ? <div>Loading...</div> : renderScores(scores)}\n\n        <div></div>\n      </div>\n    </main>\n  );\n};\n\nexport default Leaderboard;\n","import { Link } from 'react-router-dom';\n\nconst Guide = () => {\n  return (\n    <main className=\"App\">\n      <header>\n        <Link to=\"/\" className=\"home-link\">\n          <div className=\"header-titles\">\n            <h1>⚔ Goblin War ⚔️</h1>\n            <p>Only you can save us from Goblin town</p>\n          </div>\n        </Link>\n      </header>\n\n      <div className=\"score-board-container\">\n        <h3>How to play</h3>\n\n        <div>\n          <span className=\"help\">\n            Click as many goblins as you can within 15 seconds!\n          </span>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Guide;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nimport Play from './pages/Play';\nimport Leaderboard from './pages/Leaderboard';\nimport Guide from './pages/Guide';\n\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WalletProvider {...chainOptions}>\n        <div className=\"App-header\">\n          <BrowserRouter>\n            <Routes>\n              <Route path=\"/\" element={<App />} />\n              <Route path=\"/play\" element={<Play />} />\n              <Route path=\"/leaderboard\" element={<Leaderboard />} />\n              <Route path=\"/guide\" element={<Guide />} />\n            </Routes>\n          </BrowserRouter>\n\n          <div className=\"footer-container\">\n            <img\n              alt=\"Twitter Logo\"\n              className=\"twitter-logo\"\n              src=\"/twitter-logo.svg\"\n            />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`Made with @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </WalletProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n});\n"],"sourceRoot":""}